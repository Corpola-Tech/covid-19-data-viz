{"version":3,"sources":["useData.js","BubbleMap/Marks.js","BubbleMap/index.js","DateHistogram/AxisBottom.js","DateHistogram/AxisLeft.js","DateHistogram/Marks.js","DateHistogram/index.js","Main.js","App.js","useWorldAtlas.js","reportWebVitals.js","index.js"],"names":["useData","useState","covidData","setCovidData","processedData","setProcessedData","map","countryEntry","coordinates","parseFloat","Object","keys","slice","item","idx","Date","Number","flat","transformData","useEffect","csv","then","projection","geoEquirectangular","path","geoPath","graticule","geoGraticule","crg","require","country_reverse_geocoding","Marks","worldAtlas","land","interiors","data","sizeScale","sizeValue","setTooltip","className","useMemo","d","type","features","feature","coords","x","y","style","cursor","cx","cy","r","onMouseMove","evt","text","country","get_country","dataType","confirmedValueWithDataType","tooltip_value","name","toFixed","document","getElementById","showing","positionX","pageX","positionY","pageY","message","showTooltip","onMouseOut","BubbleMap","filteredData","scaleSqrt","domain","max","range","AxisBottom","xScale","innerHeight","tickFormat","tickOffset","ticks","tickValue","transform","y2","textAnchor","dy","AxisLeft","yScale","innerWidth","x2","binnedData","tooltipFormat","x0","width","x1","height","margin","xAxisTickFormat","timeFormat","yValue","DateHistogram","setBrushExtent","xValue","scaleTime","extent","start","stop","bin","value","thresholds","timeDays","array","sum","scaleLinear","brushRef","useRef","brush","brushX","select","current","on","event","selection","invert","fill","circleRadius","ref","getDayDiff","endtime","starttime","getTime","compressChunk","brushedDate","uniqueLocations","Set","getUniqueLocations","chunkData","Array","length","undefined","totalDays","end","forEach","i","indexOf","App","tooltip","brushExtent","dateHistogramSize","formatDate","summedUpTotal","findSmallestDate","findHighestDate","ToolTip","getChunkCount","getProcessedSingleChunk","getChunks","simplifyAndStoreData","getTypedValue","filter","date","totalConfirmedCases","startDate","endDate","daysCount","typedTotalCases","averageCasesPerDay","countriesHighestAverage","count","arr","entry","index","number","sort","a","b","reverse","getHighestAverage","countriesList","right","backgroundColor","top","float","color","padding","fontSize","fontWeight","paddingBottom","href","border","borderRadius","ye","Intl","DateTimeFormat","year","format","mo","month","da","day","val","reduce","recordedSmall","recordedHigh","smallestDate","highestDate","interval","days","counts","Math","ceil","filteredChunk","toDate","chunkCount","chunks","chunk_unit","push","monthChunks","weekChunks","yearChunks","localStorage","setItem","JSON","stringify","position","left","marginLeft","dataTypeConfirmCases","round","setData","json","topology","objects","countries","mesh","useWorldAtlas","Main","class","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.424e4682.chunk.js","sourcesContent":["import { useState, useEffect, useMemo } from 'react';\nimport { csv } from 'd3';\n\nconst covidCsvUrl =\n  \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\"\n\nconst row = d => {\n  d.coords = d['Location Coordinates'].split(',').map(d => +d).reverse();\n  d['Total Confirmed'] = + d['Total Confirmed'];\n  d['Reported Date'] = new Date(d['Reported Date']);\n  return d;\n};\n\nconst transformData = (covidData) => {\n  if(covidData) {\n    const nestedArray = covidData.map(countryEntry => {\n      const coordinates = [parseFloat(countryEntry['Long']), parseFloat(countryEntry['Lat'])]\n      return(Object.keys(countryEntry).slice(4).map((item, idx)=>{\n        return({\n          'Location Coordinates': `${coordinates[1]}, ${coordinates[0]}`,\n          'Reported Date': new Date(item),\n          'Total Confirmed': (Number(countryEntry[item]) - (idx===0 ? 0 : Number(countryEntry[Object.keys(countryEntry).slice(4)[idx-1]]))) < 0 ? 0 : (Number(countryEntry[item]) - (idx===0 ? 0 : Number(countryEntry[Object.keys(countryEntry).slice(4)[idx-1]]))),\n          'coords': coordinates,\n      })}))\n    }).flat(1)\n    return nestedArray\n  }\n  return\n}\n\nexport const useData = () => {\n  const [covidData, setCovidData] = useState(null);\n  const [processedData, setProcessedData] = useState(null);\n  if (processedData === null && covidData !== null) {\n    setProcessedData(transformData(covidData))\n  }\n  useEffect(() => {\n    csv(covidCsvUrl).then(setCovidData);\n  }, []);\n\n  return processedData;\n};\n","import { geoNaturalEarth1, geoPath, geoGraticule, geoEquirectangular, geoOrthographic } from \"d3\";\nimport { useMemo, useState } from \"react\";\n\nconst projection = geoEquirectangular();\n// const projection = geoOrthographic();\n// const projection = geoNaturalEarth1();\nconst path = geoPath(projection);\nconst graticule = geoGraticule();\nvar crg = require('country-reverse-geocoding').country_reverse_geocoding();\n\nexport const Marks = ({\n  worldAtlas: { land, interiors },\n  data,\n  sizeScale,\n  sizeValue,\n  setTooltip\n}) => {\n  function showTooltip(evt, text, d) {\n    var country = crg.get_country(d['coords'][1], d['coords'][0]);\n    const confirmedValue = d['Total Confirmed']\n    let dataType = d['Total Confirmed']/1000 < 10 ? '' : 'K'\n    const confirmedValueWithDataType = ((d['Total Confirmed']/1000) < 10) ? d['Total Confirmed'] : (d['Total Confirmed']/1000)\n    const tooltip_value = <small><b>{country ? `${country.name +' : '}` : ''}</b> {confirmedValueWithDataType.toFixed(2) + dataType + ' average confirmed cases per day'}</small>\n    let tooltip = document.getElementById(\"tooltip\");\n    setTooltip({showing: true, positionX: evt.pageX, positionY: evt.pageY, message:tooltip_value })\n  }\n\n  function hideTooltip(d) {\n    var tooltip = document.getElementById(\"tooltip\");\n    setTooltip({showing: false })\n  }\n  return(\n  <>\n\n  <g className=\"marks\">\n    {useMemo(\n      () => (\n        <>\n          <path className=\"sphere\" d={path({ type: \"Sphere\" })} />\n          <path className=\"graticules\" d={path(graticule())} />\n          {land.features.map((feature) => (\n            <path className=\"land\" d={path(feature)} />\n          ))}\n          <path className=\"interiors\" d={path(interiors)} />\n        </>\n      ),\n      [path, graticule, land, interiors]\n    )}\n    {useMemo(\n      () =>\n        data.map((d) => {\n          const [x, y] = projection(d.coords);\n          return <circle style={{cursor: 'pointer'}}  cx={x} cy={y} r={sizeScale(sizeValue(d))} onMouseMove={(evt)=>showTooltip(evt, 'This is blue',d)} onMouseOut={()=>hideTooltip(d)}/>;\n        }),\n      [data]\n    )}\n  </g>\n  </>\n)};\n","import React, { useMemo } from 'react';\nimport { scaleSqrt, max } from 'd3';\nimport { Marks } from './Marks';\n\nconst sizeValue = d => d['Total Confirmed'];\nconst maxRadius = 32;\n\nexport const BubbleMap = ({ data, filteredData, worldAtlas, setTooltip, processedData }) => {\n  const sizeScale = useMemo(\n    () =>\n      scaleSqrt()\n        .domain([1, max(data, sizeValue)])\n        .range([1, maxRadius]),\n    [data, sizeValue, maxRadius]\n  );\n\n  return (\n    <Marks\n      worldAtlas={worldAtlas}\n      // data={filteredData}\n      setTooltip={setTooltip}\n      data={processedData}\n      sizeScale={sizeScale}\n      sizeValue={sizeValue}\n    />\n  );\n};\n","export const AxisBottom = ({ xScale, innerHeight, tickFormat, tickOffset = 3 }) =>\n  xScale.ticks().map(tickValue => (\n    <g\n      className=\"tick\"\n      key={tickValue}\n      transform={`translate(${xScale(tickValue)},0)`}\n    >\n      <line y2={innerHeight} />\n      <text style={{ textAnchor: 'middle' }} dy=\".71em\" y={innerHeight + tickOffset}>\n        {tickFormat(tickValue)}\n      </text>\n    </g>\n  ));\n","export const AxisLeft = ({ yScale, innerWidth, tickOffset = 3 }) =>\n  yScale.ticks().map(tickValue => (\n    <g className=\"tick\" transform={`translate(0,${yScale(tickValue)})`}>\n      <line x2={innerWidth} />\n      <text\n        key={tickValue}\n        style={{ textAnchor: 'end' }}\n        x={-tickOffset}\n        dy=\".32em\"\n      >\n        {`${tickValue/1000000} M`}\n      </text>\n    </g>\n  ));\n","export const Marks = ({\n  binnedData,\n  xScale,\n  yScale,\n  tooltipFormat,\n  innerHeight\n}) =>\n  binnedData.map(d => (\n    <rect\n      className=\"mark\"\n      x={xScale(d.x0)}\n      y={yScale(d.y)}\n      width={xScale(d.x1) - xScale(d.x0)}\n      height={innerHeight - yScale(d.y)}\n    >\n      <title>{tooltipFormat(d.y)}</title>\n    </rect>\n  ));\n","import {\n  scaleLinear,\n  scaleTime,\n  max,\n  timeFormat,\n  extent,\n  histogram as bin,\n  timeMonths,\n  timeWeeks,\n  timeDays,\n  sum,\n  brushX,\n  select,\n  event\n} from 'd3';\nimport { useRef, useEffect, useMemo } from 'react';\nimport { AxisBottom } from './AxisBottom';\nimport { AxisLeft } from './AxisLeft';\nimport { Marks } from './Marks';\n\nconst margin = { top: 0, right: 30, bottom: 20, left: 45 };\nconst xAxisLabelOffset = 54;\nconst yAxisLabelOffset = 30;\nconst xAxisTickFormat = timeFormat('%m/%d/%Y');\n\nconst xAxisLabel = 'Time';\n\nconst yValue = d => d['Total Confirmed'];\nconst yAxisLabel = 'Total Confirmed';\n\nexport const DateHistogram = ({\n  data,\n  width,\n  height,\n  setBrushExtent,\n  xValue\n}) => {\n  const innerHeight = height - margin.top - margin.bottom;\n  const innerWidth = width - margin.left - margin.right;\n\n  const xScale = useMemo(\n    () =>\n      scaleTime()\n        .domain(extent(data, xValue))\n        .range([0, innerWidth])\n        // .nice()\n        ,\n    [data, xValue, innerWidth]\n  );\n\n  const binnedData = useMemo(() => {\n    const [start, stop] = xScale.domain();\n    return bin()\n      .value(xValue)\n      .domain(xScale.domain())\n      .thresholds(timeDays(start, stop))(data)\n      .map(array => ({\n        y: sum(array, yValue),\n        x0: array.x0,\n        x1: array.x1\n      }));\n  }, [xValue, yValue, xScale, data]);\n\n  const yScale = useMemo(\n    () =>\n      scaleLinear()\n        .domain([0, max(binnedData, d => d.y)])\n        .range([innerHeight, 0]),\n    [binnedData, innerHeight]\n  );\n\n  const brushRef = useRef();\n\n  useEffect(() => {\n    const brush = brushX().extent([[0, 0], [innerWidth, innerHeight]]);\n    brush(select(brushRef.current));\n    brush.on('brush end', () => {\n      setBrushExtent(event.selection && event.selection.map(xScale.invert));\n    });\n  }, [innerWidth, innerHeight]);\n\n  return (\n    <>\n      <rect width={width} height={height} fill=\"white\" />\n      <g transform={`translate(${margin.left},${margin.top})`}>\n        <AxisBottom\n          xScale={xScale}\n          innerHeight={innerHeight}\n          tickFormat={xAxisTickFormat}\n          tickOffset={5}\n        />\n        <text\n          className=\"axis-label\"\n          textAnchor=\"middle\"\n          transform={`translate(${-yAxisLabelOffset},${innerHeight /\n            2}) rotate(-90)`}\n        >\n          {yAxisLabel}\n        </text>\n        <AxisLeft yScale={yScale} innerWidth={innerWidth} tickOffset={5} />\n        <text\n          className=\"axis-label\"\n          x={innerWidth / 2}\n          y={innerHeight + xAxisLabelOffset}\n          textAnchor=\"middle\"\n        >\n          {xAxisLabel}\n        </text>\n        <Marks\n          binnedData={binnedData}\n          xScale={xScale}\n          yScale={yScale}\n          tooltipFormat={d => d}\n          circleRadius={2}\n          innerHeight={innerHeight}\n        />\n        <g ref={brushRef} />\n      </g>\n    </>\n  );\n};\n","import { useMemo, useState } from \"react\";\n\n\nconst getHighestAverage = (data, count) => {\n  const arr = data.map((entry, i)=>({index:i, number:entry['Total Confirmed']}));\n  arr.sort((a, b)=>(a.number - b.number))\n  const topCountriesIndex = arr.slice(arr.length-count).reverse()\n  const topCountries = topCountriesIndex.map(entry => data[entry.index])\n  return topCountries\n}\n\nconst getDayDiff = (endtime, starttime)=>{\n  if (endtime && starttime) {\n    const ms = endtime.getTime()-starttime.getTime()\n    return (ms /(60*60*24*1000)) + 1\n  }\n  return 0\n}\n\nconst getUniqueLocations = (data) => {\n  const uniqueLocations = data.map(item=>item['Location Coordinates'])\n  return [...new Set(uniqueLocations)]\n}\n\nconst compressChunk = (filteredData, brushedDate) => {\n  const uniqueLocations = getUniqueLocations(filteredData)\n  const chunkData = Array(uniqueLocations.length).fill(undefined)\n  const totalDays = getDayDiff(brushedDate.end, brushedDate.start)\n\n  filteredData.forEach((item, i) => {\n    if (chunkData[uniqueLocations.indexOf(item['Location Coordinates'])]) {\n      chunkData[uniqueLocations.indexOf(item['Location Coordinates'])]['Total Confirmed'] += item['Total Confirmed']\n    } else {\n      chunkData[uniqueLocations.indexOf(item['Location Coordinates'])] = item\n    }\n  });\n\n  chunkData.forEach((item, i) => {\n    chunkData[i]['Total Confirmed'] /= totalDays\n  });\n\n\n  return chunkData\n}\n\n\nconst App = ({\n  tooltip,\n  setTooltip,\n  brushExtent,\n  setBrushExtent,\n  data,\n  worldAtlas,\n  width,\n  height,\n  dateHistogramSize,\n  xValue,\n  formatDate,\n  summedUpTotal,\n  findSmallestDate,\n  findHighestDate,\n  getChunkCount,\n  getProcessedSingleChunk,\n  getChunks,\n  simplifyAndStoreData,\n  ToolTip,\n  getTypedValue,\n  BubbleMap,\n  DateHistogram,\n}) => {\n  let filteredData = brushExtent\n    ? data.filter((d) => {\n        const date = xValue(d);\n        return date > brushExtent[0] && date < brushExtent[1];\n      })\n    : data;\n\n  const totalConfirmedCases = useMemo(() => summedUpTotal(filteredData), [\n    filteredData,\n  ]);\n  const startDate = useMemo(() => findSmallestDate(filteredData), [\n    filteredData,\n  ]);\n  const endDate = useMemo(() => findHighestDate(filteredData), [filteredData]);\n  const daysCount = useMemo(() => getDayDiff(endDate, startDate), [\n    endDate,\n    startDate,\n  ]);\n\n  const typedTotalCases = useMemo(() => getTypedValue(totalConfirmedCases, 'total'), [\n    totalConfirmedCases,\n  ]);\n  const averageCasesPerDay = useMemo(\n    () => daysCount === 0 ? 0: getTypedValue(totalConfirmedCases / daysCount, 'average'),\n    [totalConfirmedCases, daysCount]\n  );\n\n  const processedData = compressChunk(filteredData, { start: startDate, end: endDate })\n  const countriesHighestAverage = getHighestAverage(processedData, 10)\n  var crg = require('country-reverse-geocoding').country_reverse_geocoding();\n  const countriesList = countriesHighestAverage.map(d => crg.get_country(d['coords'][1], d['coords'][0]) && crg.get_country(d['coords'][1], d['coords'][0]).name)\n\n  return (\n    <>\n      <div\n        style={{\n          height: height - 40,\n          width: \"content-fit\",\n          right: 10,\n          backgroundColor: \"white\",\n          top: \"10px\",\n          float: \"right\",\n          width: 270,\n          border: \"1px solid #ccc\",\n          borderRadius: 20,\n          padding: 20,\n          margin: \"auto\",\n          position: 'absolute'\n        }}\n      >\n        <h2 className=\"title\">[DATA VIZ] COVID-19 CONFIRMED CASES</h2>\n        <b>\n            {`${formatDate(startDate)} - ${formatDate(endDate)}`}\n        </b>\n        <br />\n        <br />\n        <span style={{ backgroundColor: \"grey\", color: \"white\", padding: 3 }}>\n          Total Confirmed cases\n        </span>\n        <br />\n        <div className=\"count\" style={{ fontSize: 32, fontWeight: \"bold\" }}>\n          {typedTotalCases}\n        </div>\n        <br />\n        <span style={{ backgroundColor: \"grey\", color: \"white\", padding: 3 }}>\n          Average Confirmed cases per day\n        </span>\n        <br />\n        <div className=\"count\" style={{ fontSize: 32, fontWeight: \"bold\" }}>\n          {averageCasesPerDay}\n        </div>\n        <br/>\n        <span style={{ backgroundColor: \"grey\", color: \"white\", padding: 3 }}>\n          Ten countries with highest `average confirmed cases` in order\n        </span>\n        <br />\n        <br />\n        {countriesList.map((entry, idx)=>(\n          <div style={{color: '#333', paddingBottom:5, fontSize: 14}}>\n            {idx+1}. {entry}\n          </div>\n        ))}\n        <br/>\n        <div style={{color: '#666'}}>Data Source: <a href=\"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\">\n        CSSEGISandData/COVID-19</a></div>\n\n      </div>\n      {tooltip.showing && <ToolTip tooltip={tooltip} />}\n      <div style={{ width: \"fit-content\" }}>\n        <svg\n          width={width}\n          height={height}\n          style={{ border: \"1px solid #ccc\", borderRadius: 20, margin: 10 }}\n        >\n          <BubbleMap\n            data={data}\n            filteredData={filteredData}\n            worldAtlas={worldAtlas}\n            setTooltip={setTooltip}\n            processedData={processedData}\n          />\n          <g transform={`translate(0, ${height - dateHistogramSize * height})`}>\n            <text fontSize=\"smaller\" y={-5} x={20}>Select small intervals for relatively good performance</text>\n            <DateHistogram\n              data={data}\n              width={width}\n              height={dateHistogramSize * height}\n              setBrushExtent={setBrushExtent}\n              xValue={xValue}\n            />\n          </g>\n        </svg>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useWorldAtlas } from './useWorldAtlas';\nimport { useData } from './useData';\nimport { BubbleMap } from './BubbleMap/index.js';\nimport { DateHistogram } from './DateHistogram/index.js';\nimport MainApp from './Main'\n\nconst width = 960;\nconst height = 630;\nconst dateHistogramSize = 0.2;\n\nconst xValue = d => d['Reported Date'];\n\nconst formatDate = (d) => {\n  let ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d);\n  let mo = new Intl.DateTimeFormat('en', { month: 'short' }).format(d);\n  let da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d);\n  return `${mo} ${da}, ${ye}`\n}\n\nconst summedUpTotal = (arr) => {\n  const values = arr.map(val=>val['Total Confirmed'])\n  return values.reduce((a, b) => a + b, 0)\n}\n\nconst findSmallestDate = (data) => {\n  let recordedSmall\n  data.forEach((item, i) => {\n    if (recordedSmall === undefined) {\n      recordedSmall = item['Reported Date']\n    } else if (item['Reported Date']<recordedSmall) {\n      recordedSmall = item['Reported Date']\n    }\n  });\n  return recordedSmall\n}\nconst findHighestDate = (data) => {\n  let recordedHigh\n  data.forEach((item, i) => {\n    if (recordedHigh === undefined) {\n      recordedHigh = item['Reported Date']\n    } else if (item['Reported Date']>recordedHigh) {\n      recordedHigh = item['Reported Date']\n    }\n  });\n  return recordedHigh\n}\n\nconst getChunkCount = (smallestDate, highestDate, interval) => {\n  const days = (highestDate - smallestDate)/86400000\n  const counts = [Math.ceil(days/7), Math.ceil(days/30), Math.ceil(days/360)]\n  if (interval==='w') {\n    return counts[0]\n  } else if (interval==='m') {\n    return counts[1]\n  } else if (interval === 'y'){\n    return counts[2]\n  }\n}\n\nconst getUniqueLocations = (data) => {\n  const uniqueLocations = data.map(item=>item['Location Coordinates'])\n  return [...new Set(uniqueLocations)]\n}\n\nconst compressChunk = (filteredChunk) => {\n  const uniqueLocations = getUniqueLocations(filteredChunk)\n  const chunkData = []\n  filteredChunk.forEach((item, i) => {\n    if (chunkData[uniqueLocations.indexOf(item['Location Coordinates'])]) {\n      chunkData[uniqueLocations.indexOf(item['Location Coordinates'])]['Total Confirmed'] += item['Total Confirmed']\n    } else {\n      chunkData[uniqueLocations.indexOf(item['Location Coordinates'])] = item\n    }\n  });\n  return chunkData\n}\n\nconst getProcessedSingleChunk = (data, smallestDate, highestDate, i, interval) => {\n  let days\n  if (interval==='w') {\n    days = 7\n  } else if (interval==='m') {\n    days = 30\n  } else if (interval === 'y'){\n    days = 360\n  }\n\n  const fromDate = new Date(smallestDate - (i * -1 * days * 24 * 60 * 60 * 1000))\n  let toDate = new Date(smallestDate - ((i+1) * -1 * days * 24 * 60 * 60 * 1000))\n  toDate = toDate > highestDate ? highestDate : toDate\n\n  const filteredChunk = data.filter(item=>{\n    // console.log(typeof item['Reported Date']);\n    return true\n  })\n\n  // const filteredChunk = data.filter((item)=>(fromDate <= (item['Reported Date']) < toDate))\n  const compressedChunk = compressChunk(filteredChunk)\n  return compressedChunk\n}\n\nconst getChunks = (data, smallestDate, highestDate, interval) => {\n  const chunkCount = getChunkCount(smallestDate, highestDate, interval)\n  const chunks = []\n  Array(chunkCount).fill(undefined).forEach((item, i) => {\n    const chunk_unit = getProcessedSingleChunk(data, smallestDate, highestDate, i, interval)\n    chunks.push(chunk_unit)\n  });\n\n  return chunks.flat(1)\n}\n\nconst simplifyAndStoreData = (data) => {\n  const smallestDate = findSmallestDate(data)\n  const highestDate = findHighestDate(data)\n  const monthChunks = getChunks(data, smallestDate, highestDate, 'm')\n  const weekChunks = getChunks(data, smallestDate, highestDate, 'w')\n  const yearChunks = getChunks(data, smallestDate, highestDate, 'y')\n  localStorage.setItem(\"month\", JSON.stringify(monthChunks));\n  localStorage.setItem(\"week\", JSON.stringify(weekChunks));\n  localStorage.setItem(\"year\", JSON.stringify(yearChunks));\n\n  return 'completed'\n}\n\nconst ToolTip = ({tooltip}) => {\n  const width = 300\n  return(\n    <div\n      style={{\n        position: 'absolute',\n        left: -width/2,\n        top: tooltip.positionY-60,\n        backgroundColor: 'white',\n        marginLeft: tooltip.positionX,\n        border: '1px solid #ccc',\n        padding: 5,\n        width,\n      }}>\n        {tooltip.message}\n    </div>\n  )\n}\n\nconst getTypedValue = (totalConfirmedCases, type) => {\n  let dataTypeConfirmCases = totalConfirmedCases/1000 < 10 ? '' : 'K'\n  let confirmedValueWithDataType = totalConfirmedCases\n  dataTypeConfirmCases = totalConfirmedCases/1000000 < 10 ? dataTypeConfirmCases : 'M'\n  dataTypeConfirmCases = totalConfirmedCases/1000000000 < 10 ? dataTypeConfirmCases : 'B'\n  if (dataTypeConfirmCases === 'B') {\n    confirmedValueWithDataType = (totalConfirmedCases / 1000000000).toFixed(2)\n  } else if (dataTypeConfirmCases === 'M') {\n    confirmedValueWithDataType = (totalConfirmedCases / 1000000).toFixed(2)\n  } else if (dataTypeConfirmCases === 'K') {\n    confirmedValueWithDataType = (totalConfirmedCases / 1000).toFixed(2)\n  } else {\n    confirmedValueWithDataType = type === 'average' ? totalConfirmedCases.toFixed(2):Math.round(totalConfirmedCases)\n  }\n  return (`${confirmedValueWithDataType} ${dataTypeConfirmCases}`)\n}\n\nconst App = () => {\n  const worldAtlas = useWorldAtlas();\n  let data = useData();\n  const [brushExtent, setBrushExtent] = useState();\n  const [tooltip, setTooltip] = useState({showing:false, positionX: 0, positionY:0, message: ''});\n\n  if (!worldAtlas || !data) {\n    return <div class=\"loader\"></div>;\n  }\n\n  return <MainApp {...{tooltip, setTooltip, brushExtent, setBrushExtent, data, worldAtlas,\n    width,height,dateHistogramSize,xValue,formatDate,\n    summedUpTotal,findSmallestDate,findHighestDate,getChunkCount,compressChunk,\n    getProcessedSingleChunk,getChunks,simplifyAndStoreData,ToolTip,getTypedValue,\n    BubbleMap, DateHistogram\n  }} />\n\n};\n\nexport default App;\n","import React, { useState, useEffect } from 'react';\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson';\n\nconst jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';\n\nexport const useWorldAtlas = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    json(jsonUrl).then(topology => {\n      const { countries, land } = topology.objects;\n      setData({\n        land: feature(topology, land),\n        interiors: mesh(topology, countries, (a, b) => a !== b)\n      });\n    });\n  }, []);\n\n  return data;\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}